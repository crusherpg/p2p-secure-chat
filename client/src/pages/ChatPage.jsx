import React, { useEffect, useMemo, useRef, useState } from 'react';
import { Shield, Bell, Search, MoreVertical, Send, Paperclip, Smile, Mic, Check, CheckCheck, Upload, X, Settings } from 'lucide-react';
import { useAuth } from '../context/AuthContext';
import userService from '../services/userService';
import messageService from '../services/messageService';
import socketService from '../services/socketService';
import { conversationService } from '../services/conversationService';
import SettingsModal from '../components/SettingsModal';
import toast from 'react-hot-toast';

const useDebouncedCallback = (fn, delay = 300) => {
  const t = useRef();
  return (...args) => { clearTimeout(t.current); t.current = setTimeout(() => fn(...args), delay); };
};
const Spinner = () => (<div className="flex items-center justify-center py-3"><div className="w-4 h-4 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin"></div></div>);
const TypingIndicator = ({ users }) => !users.length?null:(<div className="px-4 py-2 text-xs text-gray-500 italic">{users.join(', ')} typing…</div>);
const Emoji = ({ onPick }) => { const arr=['😀','😂','😍','👍','🙏','🔥','🎉','🥳','❤️','👏','😎','🤖']; return (<div className="absolute bottom-12 left-16 bg-white border border-gray-200 rounded-lg p-2 shadow-lg grid grid-cols-6 gap-1 z-10">{arr.map(e=>(<button key={e} className="text-xl hover:bg-gray-100 rounded p-1" onClick={()=>onPick(e)}>{e}</button>))}</div>); };
const FileUpload = ({ onUpload, onCancel, uploading, progress }) => (<div className="absolute bottom-12 left-0 right-0 bg-white border-t border-gray-200 p-4 z-20"><div className="flex items-center justify-between mb-2"><span className="text-sm font-medium">Upload File</span><button onClick={onCancel} className="p-1 hover:bg-gray-100 rounded"><X className="w-4 h-4"/></button></div><div className="space-y-3"><input type="file" accept="image/*,application/pdf,.txt,.doc,.docx" onChange={(e)=>e.target.files[0]&&onUpload(e.target.files[0])} className="w-full text-sm" disabled={uploading}/>{uploading&&(<div><div className="w-full bg-gray-200 rounded-full h-2"><div className="bg-blue-600 h-2 rounded-full transition-all duration-300" style={{width:`${progress}%`}}/></div><p className="text-xs text-gray-500 mt-1">{progress}% uploaded</p></div>)}</div></div>);
const Sidebar=({users,onSelect,activeId,query,setQuery,onSearch,loading})=>(<aside className="sidebar"><div className="sidebar-head"><p className="text-sm font-semibold mb-2">Messages</p><div className="relative"><input value={query} onChange={(e)=>{setQuery(e.target.value);onSearch(e.target.value);}} placeholder="Search users..." className="search pl-8"/><Search className="w-4 h-4 absolute left-2.5 top-2.5 text-gray-400"/></div></div><div className="flex-1 overflow-y-auto">{loading&&<Spinner/>}{!loading&&users.length===0&&(<div className="p-4 text-center text-gray-500 text-sm">{query?'No users found':'No online users'}</div>)}{users.map(u=> (<button key={u.id} onClick={()=>onSelect(u)} className={`user-item ${activeId===u.id?'bg-gray-50':''}`}><div className="avatar">{u.avatar?<img src={u.avatar} alt={u.name} className="w-full h-full object-cover"/>:(u.username?.[0]||u.name?.[0]||'U')}</div><div className="min-w-0 flex-1"><div className="flex items-center justify-between"><p className="text-sm font-medium truncate">{u.username||u.name}</p><span className="text-[11px] text-gray-500">{u.department||''}</span></div><p className="text-xs text-gray-500 truncate">{u.status==='online'?'Online':u.lastSeen?`Last seen ${new Date(u.lastSeen).toLocaleTimeString([], {hour:'2-digit',minute:'2-digit'})}`:(u.status||'')}</p></div><div className={`w-2 h-2 rounded-full ${u.status==='online'?'bg-green-500':u.status==='away'?'bg-yellow-500':u.status==='busy'?'bg-red-500':'bg-gray-400'}`}/></button>))}</div></aside>);

const ChatPage=()=>{
  const { user, token, logout } = useAuth();
  const [users,setUsers]=useState([]); const [query,setQuery]=useState('');
  const [active,setActive]=useState(null); const [messages,setMessages]=useState([]);
  const [text,setText]=useState(''); const [showEmoji,setShowEmoji]=useState(false);
  const [showUpload,setShowUpload]=useState(false); const [uploading,setUploading]=useState(false);
  const [uploadProgress,setUploadProgress]=useState(0); const [loadingUsers,setLoadingUsers]=useState(false);
  const [loadingMessages,setLoadingMessages]=useState(false); const [typingUsers,setTypingUsers]=useState([]);
  const messagesEndRef=useRef(null); const inputRef=useRef(null);

  useEffect(()=>{ const saved=localStorage.getItem('p2p_active'); if(saved){ try{ setActive(JSON.parse(saved)); }catch{}} },[]);
  useEffect(()=>{ if(active) localStorage.setItem('p2p_active', JSON.stringify(active)); },[active]);

  useEffect(()=>{ userService.setAuthToken(token); messageService.setAuthToken(token); },[token]);

  const normalizeUser=(u)=>({ id:u._id||u.id, username:u.username||u.name, name:u.username||u.name, avatar:u.avatar, status:u.status||(u.lastSeen?'offline':'online'), department:u.department, lastSeen:u.lastSeen });

  const fetchOnline=async()=>{ setLoadingUsers(true); try{ const live=await userService.listOnline(100); const normalized=live.map(normalizeUser); setUsers(normalized); if(!active&&normalized.length){ const conversationId=await conversationService.ensureConversationWith(normalized[0].id); setActive({...normalized[0], conversationId}); } } catch(e){ const demo=[normalizeUser({id:'alice',name:'Alice Cooper',status:'online'}), normalizeUser({id:'bob',name:'Bob Wilson',status:'away'})]; setUsers(demo); if(!active) setActive({...demo[0], conversationId: demo[0].id}); } finally{ setLoadingUsers(false);} };
  useEffect(()=>{ fetchOnline(); const t=setInterval(fetchOnline,15000); return()=>clearInterval(t); },[]);

  const debouncedSearch=useDebouncedCallback(async(q)=>{ if(!q.trim()){ fetchOnline(); return; } setLoadingUsers(true); try{ const res=await userService.searchUsers(q,20); setUsers(res.map(u=>({...normalizeUser(u)}))); } finally{ setLoadingUsers(false);} },300);

  useEffect(()=>{ if(!token) return; try{ socketService.connect(token);}catch{} return()=>{ try{socketService.disconnect();}catch{}}; },[token]);
  useEffect(()=>{ if(!active?.conversationId) return; socketService.joinConversation(active.conversationId); return()=>socketService.leaveConversation(active.conversationId); },[active?.conversationId]);

  useEffect(()=>{ const onNew=(msg)=>{ if(!active?.conversationId||msg.conversationId!==active.conversationId) return; const normalized={ id:msg.id||`msg-${Date.now()}`, from:(msg.from?.id||msg.from)===user?.id?'me':'them', text: msg.content?.encrypted?'[Encrypted Message]':(msg.content||msg.text||''), ts:new Date(msg.timestamp||Date.now()).getTime(), status: msg.status||'delivered', type: msg.type||'text', attachment: msg.attachment }; setMessages(p=> p.find(m=>m.id===normalized.id)?p:[...p, normalized]); };
    const onStatus=(d)=>{ if(!d?.messageId) return; setMessages(p=>p.map(m=>m.id===d.messageId?{...m,status:d.status}:m)); };
    const onTyping=(d)=>{ if(d?.conversationId!==active?.conversationId || d.userId===user?.id) return; const name=d.username||'Someone'; setTypingUsers(p=> p.includes(name)?p:[...p,name]); setTimeout(()=> setTypingUsers(p=>p.filter(x=>x!==name)),4000); };
    const onStopTyping=(d)=>{ if(d?.conversationId!==active?.conversationId) return; const name=d.username||'Someone'; setTypingUsers(p=>p.filter(x=>x!==name)); };
    socketService.on('new_message', onNew); socketService.on('message_status_update', onStatus); socketService.on('user_typing', onTyping); socketService.on('user_stop_typing', onStopTyping);
    return()=>{ socketService.off('new_message', onNew); socketService.off('message_status_update', onStatus); socketService.off('user_typing', onTyping); socketService.off('user_stop_typing', onStopTyping); };
  },[active?.conversationId, user?.id]);

  useEffect(()=>{ const t=setTimeout(()=>{ messagesEndRef.current?.scrollIntoView({behavior:'smooth'}); },100); return()=>clearTimeout(t); },[messages]);

  const selectUser=async(u)=>{ if(active?.id===u.id) return; setLoadingMessages(true); setMessages([]); try{ const conversationId=await conversationService.ensureConversationWith(u.id); const activeUser={...u, conversationId}; setActive(activeUser); const { messages:history }=await messageService.getHistory(conversationId); const normalized=(history||[]).map(m=>({ id:m.id||m._id, from:(m.from?.id||m.from)===user?.id?'me':'them', text:m.content?.encrypted?'[Encrypted Message]':(m.content||m.text||''), ts:new Date(m.timestamp).getTime(), status:m.status||'delivered', type:m.type||'text', attachment:m.attachment })); setMessages(normalized); } catch(e){ setMessages([]);} finally{ setLoadingMessages(false);} };

  const send=async()=>{ if(!text.trim()||!active?.conversationId) return; const localId=`m-${Date.now()}`; const messageText=text.trim(); setMessages(p=>[...p,{id:localId, from:'me', text:messageText, ts:Date.now(), status:'sending'}]); setText(''); try{ const ok=socketService.sendMessage({ conversationId: active.conversationId, content: messageText, type:'text', tempId: localId }); if(ok) setMessages(p=>p.map(m=>m.id===localId?{...m,status:'sent'}:m)); else { const res=await messageService.sendMessage({ conversationId: active.conversationId, type:'text', encryptedContent: btoa(messageText), iv:'demo-iv', authTag:'demo-tag' }); setMessages(p=>p.map(m=>m.id===localId?{...m,id:res.messageId,status:'delivered'}:m)); } } catch{ setMessages(p=>p.map(m=>m.id===localId?{...m,status:'failed'}:m)); toast.error('Failed to send message'); } };

  const handleFileUpload=async(file)=>{ if(!active) return; setUploading(true); setUploadProgress(0); try{ const result=await messageService.uploadFile(file,(e)=>{ if(e.lengthComputable){ setUploadProgress(Math.round((e.loaded*100)/e.total)); }}); const fileMsg={ id:`f-${Date.now()}`, from:'me', text:`📎 ${file.name}`, ts:Date.now(), status:'sent', type:'file', attachment:{ filename: result.file.filename, originalName: file.name, size: file.size, mimeType: file.type, url:`/api/files/download/${result.file.filename}` } }; setMessages(p=>[...p,fileMsg]); socketService.sendMessage({ conversationId: active.conversationId, content:fileMsg.text, type:'file', attachment:fileMsg.attachment }); } finally{ setUploading(false); setShowUpload(false); setUploadProgress(0);} };

  const handleTyping=()=>{ if(active?.conversationId) socketService.startTyping(active.conversationId); };
  const StatusTicks=({status})=> status==='read'?<CheckCheck className="w-4 h-4 text-blue-600"/>: status==='delivered'?<CheckCheck className="w-4 h-4 text-gray-400"/>: status==='sent'?<Check className="w-4 h-4 text-gray-400"/>: status==='sending'?<div className="w-4 h-4 border border-gray-400 border-t-transparent rounded-full animate-spin"/>: status==='failed'?<X className="w-4 h-4 text-red-500"/>:null;

  return (<div className="app-shell"><div className="topbar"><div className="flex items-center gap-3"><div className="w-9 h-9 rounded-lg bg-blue-600 text-white flex items-center justify-center"><Shield className="w-5 h-5"/></div><div><p className="text-sm font-semibold">P2P Secure Chat</p><p className="text-[11px] text-gray-500">Made for Enterprise</p></div></div><div className="status-pill"><span className={`w-1.5 h-1.5 rounded-full ${socketService.isSocketConnected()?'bg-green-500':'bg-yellow-500'}`}/> {socketService.isSocketConnected()?'Connected':'Connecting...'}</div><div className="flex items-center gap-1"><button className="icon-btn"><Search className="w-5 h-5"/></button><button className="icon-btn relative"><Bell className="w-5 h-5"/><span className="absolute -top-0.5 -right-0.5 w-2 h-2 rounded-full bg-red-500"/></button><button onClick={logout} className="icon-btn"><MoreVertical className="w-5 h-5"/></button><div className="avatar w-8 h-8">{user?.username?.[0]?.toUpperCase()||'U'}</div></div></div><div className="layout"><Sidebar users={users} onSelect={selectUser} activeId={active?.id} query={query} setQuery={setQuery} onSearch={debouncedSearch} loading={loadingUsers}/><main className="main"><div className="chat-head"><div><p className="text-sm font-semibold">{active?(active.username||active.name):'Select a conversation'}</p>{active&&(<p className="text-xs text-gray-500">{active.status==='online'?'Online':active.lastSeen?`Last seen ${new Date(active.lastSeen).toLocaleTimeString([], {hour:'2-digit',minute:'2-digit'})}`:(active.status||'')}</p>)}</div>{active&&(<div className="status-pill">End-to-end encrypted</div>)}</div><div className="chat-body relative">{!active?(<div className="h-full flex items-center justify-center"><div className="bg-white/90 backdrop-blur rounded-2xl border border-gray-200 p-8 text-center shadow-sm max-w-lg"><div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4"><Shield className="w-8 h-8 text-blue-600"/></div><p className="text-lg font-semibold mb-2">Welcome to P2P Secure Chat</p><p className="text-sm text-gray-600 mb-4">Your messages are end-to-end encrypted and secure.</p><p className="text-xs text-gray-500">Search for users on the left to start a conversation.</p></div></div>):(<><div className="max-w-4xl mx-auto space-y-3">{loadingMessages&&(<div className="flex justify-center py-4"><Spinner/></div>)}{messages.map(m=>(<div key={m.id} className={m.from==='me'?'bubble-out ml-auto':'bubble-in'}><div className="flex items-end gap-3"><div className="flex-1">{m.type==='file'?(<div className="flex items-center gap-2"><Paperclip className="w-4 h-4"/><span className="text-sm">{m.attachment?.originalName||m.text}</span>{m.attachment?.url&&(<a href={m.attachment.url} download className="text-xs text-blue-600 hover:underline ml-2">Download</a>)}</div>):(<p className="text-[15px] whitespace-pre-wrap">{m.text}</p>)}</div>{m.from==='me'&&<StatusTicks status={m.status}/>}</div><span className="text-[11px] opacity-70 block mt-1">{new Date(m.ts).toLocaleTimeString([], {hour:'2-digit',minute:'2-digit'})}</span></div>))}<div ref={messagesEndRef}/></div><TypingIndicator users={typingUsers}/></>) }{showUpload&&(<FileUpload onUpload={handleFileUpload} onCancel={()=>setShowUpload(false)} uploading={uploading} progress={uploadProgress}/>)}</div><div className="composer relative"><div className="composer-bar"><button onClick={()=>setShowUpload(true)} className="icon-btn" title="Upload file"><Paperclip className="w-5 h-5"/></button><input ref={inputRef} value={text} onChange={(e)=>{ setText(e.target.value); handleTyping(); }} onKeyDown={(e)=>{ if(e.key==='Enter'&&!e.shiftKey){ e.preventDefault(); send(); } }} placeholder="Type a message..." className="flex-1 outline-none px-1 py-2 text-[15px]" disabled={!active}/><button onClick={()=>setShowEmoji(s=>!s)} className="icon-btn" title="Add emoji"><Smile className="w-5 h-5"/></button><button className="icon-btn" title="Voice message"><Mic className="w-5 h-5"/></button><button onClick={send} disabled={!text.trim()||!active} className="send-btn disabled:opacity-50 disabled:cursor-not-allowed" title="Send message"><Send className="w-4 h-4"/></button>{showEmoji&&<Emoji onPick={(e)=>{ setText(t=>t+e); setShowEmoji(false); inputRef.current?.focus(); }}/>}</div></div></main></div><SettingsModal isOpen={false} onClose={()=>{}}/></div>);
};

export default ChatPage;
